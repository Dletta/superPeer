// Copyright (c) 2017, Peculiar Ventures, All rights reserved.

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pvtsutils = require('pvtsutils');

class CryptoError extends Error {
}

class AlgorithmError extends CryptoError {
}

class UnsupportedOperationError extends CryptoError {
    constructor(methodName) {
        super(`Unsupported operation: ${methodName ? `: ${methodName}` : ""}`);
    }
}

class OperationError extends CryptoError {
}

class RequiredPropertyError extends CryptoError {
    constructor(propName) {
        super(`${propName}: Missing required property`);
    }
}

class ProviderCrypto {
    async digest(algorithm, data) {
        this.checkDigest.apply(this, arguments);
        return this.onDigest.apply(this, arguments);
    }
    checkDigest(algorithm, data) {
        this.checkAlgorithmName(algorithm);
    }
    async onDigest(algorithm, data) {
        throw new UnsupportedOperationError("digest");
    }
    async generateKey(algorithm, extractable, keyUsages) {
        this.checkGenerateKey.apply(this, arguments);
        return this.onGenerateKey.apply(this, arguments);
    }
    checkGenerateKey(algorithm, extractable, keyUsages) {
        this.checkAlgorithmName(algorithm);
        if (!(keyUsages && keyUsages.length)) {
            throw new TypeError(`Usages cannot be empty when creating a key.`);
        }
        let allowedUsages;
        if (Array.isArray(this.usages)) {
            allowedUsages = this.usages;
        }
        else {
            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);
        }
        this.checkKeyUsages(keyUsages, allowedUsages);
    }
    async onGenerateKey(algorithm, extractable, keyUsages) {
        throw new UnsupportedOperationError("generateKey");
    }
    async sign(algorithm, key, data) {
        this.checkSign.apply(this, arguments);
        return this.onSign.apply(this, arguments);
    }
    checkSign(algorithm, key, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "sign");
    }
    async onSign(algorithm, key, data) {
        throw new UnsupportedOperationError("sign");
    }
    async verify(algorithm, key, signature, data) {
        this.checkVerify.apply(this, arguments);
        return this.onVerify.apply(this, arguments);
    }
    checkVerify(algorithm, key, signature, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "sign");
    }
    async onVerify(algorithm, key, signature, data) {
        throw new UnsupportedOperationError("verify");
    }
    async encrypt(algorithm, key, data) {
        this.checkEncrypt.apply(this, arguments);
        return this.onEncrypt.apply(this, arguments);
    }
    checkEncrypt(algorithm, key, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "encrypt");
    }
    async onEncrypt(algorithm, key, data) {
        throw new UnsupportedOperationError("encrypt");
    }
    async decrypt(algorithm, key, data) {
        this.checkDecrypt.apply(this, arguments);
        return this.onDecrypt.apply(this, arguments);
    }
    checkDecrypt(algorithm, key, data) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(key, "decrypt");
    }
    async onDecrypt(algorithm, key, data) {
        throw new UnsupportedOperationError("decrypt");
    }
    async deriveBits(algorithm, baseKey, length) {
        this.checkDeriveBits.apply(this, arguments);
        return this.onDeriveBits.apply(this, arguments);
    }
    checkDeriveBits(algorithm, baseKey, length) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(baseKey, "deriveBits");
        if (length % 8 !== 0) {
            throw new OperationError("length: Is not multiple of 8");
        }
    }
    async onDeriveBits(algorithm, baseKey, length) {
        throw new UnsupportedOperationError("deriveBits");
    }
    async deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {
        this.checkDeriveKey.apply(this, arguments);
        return this.onDeriveKey.apply(this, arguments);
    }
    checkDeriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {
        this.checkAlgorithmName(algorithm);
        this.checkAlgorithmParams(algorithm);
        this.checkCryptoKey(baseKey, "deriveKey");
    }
    async onDeriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {
        throw new UnsupportedOperationError("deriveKey");
    }
    async exportKey(format, key) {
        this.checkExportKey.apply(this, arguments);
        return this.onExportKey.apply(this, arguments);
    }
    checkExportKey(format, key) {
    }
    async onExportKey(format, key) {
        throw new UnsupportedOperationError("exportKey");
    }
    async importKey(format, keyData, algorithm, extractable, keyUsages) {
        this.checkImportKey.apply(this, arguments);
        return this.onImportKey.apply(this, arguments);
    }
    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {
    }
    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {
        throw new UnsupportedOperationError("importKey");
    }
    async wrapKey(format, key, wrappingKey, wrapAlgorithm) {
        this.checkWrapKey.apply(this, arguments);
        return this.onWrapKey.apply(this, arguments);
    }
    checkWrapKey(format, key, wrappingKey, wrapAlgorithm) {
    }
    async onWrapKey(format, key, wrappingKey, wrapAlgorithm) {
        throw new UnsupportedOperationError("wrapKey");
    }
    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        this.checkUnwrapKey.apply(this, arguments);
        return this.onUnwrapKey.apply(this, arguments);
    }
    checkUnwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
    }
    async onUnwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        throw new UnsupportedOperationError("unwrapKey");
    }
    checkAlgorithmName(algorithm) {
        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {
            throw new AlgorithmError("Unrecognized name");
        }
    }
    checkAlgorithmParams(algorithm) {
    }
    checkKeyUsages(usages, allowed) {
        for (const usage of usages) {
            if (allowed.indexOf(usage) === -1) {
                throw new TypeError("Cannot create a key using the specified key usages");
            }
        }
    }
    checkCryptoKey(key, keyUsage) {
        this.checkAlgorithmName(key.algorithm);
        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {
            throw new CryptoError(`key.algorithm does not match that of operation`);
        }
    }
    checkRequiredProperty(data, propName) {
        if (!(propName in data)) {
            throw new RequiredPropertyError(propName);
        }
    }
    checkHashAlgorithm(algorithm, hashAlgorithms) {
        for (const item of hashAlgorithms) {
            if (item.toLowerCase() === algorithm.name.toLowerCase()) {
                return;
            }
        }
        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(", ")}`);
    }
}

class AesProvider extends ProviderCrypto {
    checkGenerateKey(algorithm, extractable, keyUsages) {
        super.checkGenerateKey.apply(this, arguments);
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not a Number");
        }
        switch (algorithm.length) {
            case 128:
            case 192:
            case 256:
                break;
            default:
                throw new TypeError("length: Must be 128, 192, or 256");
        }
    }
}

class AesCbcProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CBC";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "iv");
        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
            throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        if (algorithm.iv.byteLength !== 16) {
            throw new TypeError("iv: Must have length 16 bytes");
        }
    }
}

class AesCmacProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CMAC";
        this.usages = ["sign", "verify"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not a Number");
        }
        if (algorithm.length < 1) {
            throw new OperationError("length: Must be more than 0");
        }
    }
}

class AesCtrProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-CTR";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "counter");
        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {
            throw new TypeError("counter: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        if (algorithm.counter.byteLength !== 16) {
            throw new TypeError("iv: Must have length 16 bytes");
        }
        this.checkRequiredProperty(algorithm, "length");
        if (typeof algorithm.length !== "number") {
            throw new TypeError("length: Is not a Number");
        }
        if (algorithm.length < 1) {
            throw new OperationError("length: Must be more than 0");
        }
    }
}

class AesEcbProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-ECB";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
}

class AesGcmProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-GCM";
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "iv");
        if (algorithm.iv.byteLength < 0) {
            throw new OperationError("iv: Must have length more than 0 and less than 2^64 - 1");
        }
        if (!("tagLength" in algorithm)) {
            algorithm.tagLength = 128;
        }
        switch (algorithm.tagLength) {
            case 32:
            case 64:
            case 96:
            case 104:
            case 112:
            case 120:
            case 128:
                break;
            default:
                throw new OperationError("tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128");
        }
    }
}

class AesKwProvider extends AesProvider {
    constructor() {
        super(...arguments);
        this.name = "AES-KW";
        this.usages = ["wrapKey", "unwrapKey"];
    }
}

class DesProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.usages = ["encrypt", "decrypt", "wrapKey", "unwrapKey"];
    }
    checkAlgorithmParams(algorithm) {
        if (this.ivSize) {
            this.checkRequiredProperty(algorithm, "iv");
            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {
                throw new TypeError("iv: Is not of type '(ArrayBuffer or ArrayBufferView)'");
            }
            if (algorithm.iv.byteLength !== this.ivSize) {
                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);
            }
        }
    }
}

class RsaProvider extends ProviderCrypto {
    checkGenerateKey(algorithm, extractable, keyUsages) {
        super.checkGenerateKey.apply(this, arguments);
        this.checkRequiredProperty(algorithm, "hash");
        if (RsaProvider.HASH_ALGORITHMS.indexOf(algorithm.hash.name.toUpperCase()) === -1) {
            throw new AlgorithmError(`Unsupported hash algorithm`);
        }
        this.checkRequiredProperty(algorithm, "publicExponent");
        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {
            throw new TypeError("publicExponent: Missing or not a Uint8Array");
        }
        const publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);
        if (!(publicExponent === "Aw==" || publicExponent === "AQAB")) {
            throw new TypeError("publicExponent: Must be [3] or [1,0,1]");
        }
        this.checkRequiredProperty(algorithm, "modulusLength");
        switch (algorithm.modulusLength) {
            case 1024:
            case 2048:
            case 4096:
                break;
            default:
                throw new TypeError("modulusLength: Must be 1024, 2048, or 4096");
        }
    }
}
RsaProvider.HASH_ALGORITHMS = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];

class RsaSsaProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSASSA-PKCS1-v1_5";
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
    }
}

class RsaPssProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSA-PSS";
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "saltLength");
        if (typeof algorithm.saltLength !== "number") {
            throw new TypeError("saltLength: Is not a Number");
        }
    }
}

class RsaOaepProvider extends RsaProvider {
    constructor() {
        super(...arguments);
        this.name = "RSA-OAEP";
        this.usages = {
            privateKey: ["decrypt", "unwrapKey"],
            publicKey: ["encrypt", "wrapKey"],
        };
    }
    checkAlgorithmParams(algorithm) {
        if (algorithm.label
            && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {
            throw new TypeError("label: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
    }
}

class EllipticProvider extends ProviderCrypto {
    checkGenerateKey(algorithm, extractable, keyUsages) {
        super.checkGenerateKey.apply(this, arguments);
        this.checkRequiredProperty(algorithm, "namedCurve");
        this.checkNamedCurve(algorithm.namedCurve);
    }
    checkNamedCurve(namedCurve) {
        for (const item of this.namedCurves) {
            if (item.toLowerCase() === namedCurve.toLowerCase()) {
                return;
            }
        }
        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(", ")}`);
    }
}

class EcdsaProvider extends EllipticProvider {
    constructor() {
        super(...arguments);
        this.name = "ECDSA";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];
        this.usages = {
            privateKey: ["sign"],
            publicKey: ["verify"],
        };
        this.namedCurves = ["P-256", "P-384", "P-521"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
    }
}

const KEY_TYPES = ["secret", "private", "public"];
class CryptoKey {
    static create(algorithm, type, extractable, usages) {
        const key = new this();
        key.algorithm = algorithm;
        key.type = type;
        key.extractable = extractable;
        key.usages = usages;
        return key;
    }
    static isKeyType(data) {
        return KEY_TYPES.indexOf(data) !== -1;
    }
}

class EcdhProvider extends EllipticProvider {
    constructor() {
        super(...arguments);
        this.name = "ECDH";
        this.usages = {
            privateKey: ["deriveBits", "deriveKey"],
            publicKey: [],
        };
        this.namedCurves = ["P-256", "P-384", "P-521"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "public");
        if (!(algorithm.public instanceof CryptoKey)) {
            throw new TypeError("public: Is not a CryptoKey");
        }
        if (algorithm.public.type !== "public") {
            throw new OperationError("public: Is not a public key");
        }
        if (algorithm.public.algorithm.name !== this.name) {
            throw new OperationError(`public: Is not ${this.name} key`);
        }
    }
}

class HmacProvider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.name = "HMAC";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SAH-384", "SHA-512"];
        this.usages = ["sign", "verify"];
    }
    getDefaultLength(algName) {
        switch (algName.toUpperCase()) {
            case "SHA-1":
                return 160;
            case "SHA-256":
                return 256;
            case "SHA-384":
                return 384;
            case "SHA-521":
                return 521;
            default:
                throw new Error(`Unknown algorithm name '${algName}'`);
        }
    }
    checkGenerateKey(algorithm, extractable, keyUsages) {
        super.checkGenerateKey.apply(this, arguments);
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        if ("length" in algorithm) {
            if (typeof algorithm.length !== "number") {
                throw new TypeError("length: Is not a Number");
            }
            if (algorithm.length < 8) {
                throw new OperationError("length: Is less than 8 bits");
            }
        }
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        this.checkRequiredProperty(algorithm, "salt");
        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {
            throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        this.checkRequiredProperty(algorithm, "iterations");
        if (typeof algorithm.iterations !== "number") {
            throw new TypeError("iterations: Is not a Number");
        }
        if (algorithm.iterations < 1) {
            throw new TypeError("iterations: Is less than 1");
        }
    }
}

class Pbkdf2Provider extends ProviderCrypto {
    constructor() {
        super(...arguments);
        this.name = "PBKDF2";
        this.hashAlgorithms = ["SHA-1", "SHA-256", "SAH-384", "SHA-512"];
        this.usages = ["deriveBits", "deriveKey"];
    }
    checkAlgorithmParams(algorithm) {
        this.checkRequiredProperty(algorithm, "hash");
        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);
        this.checkRequiredProperty(algorithm, "salt");
        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {
            throw new TypeError("salt: Is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        this.checkRequiredProperty(algorithm, "iterations");
        if (typeof algorithm.iterations !== "number") {
            throw new TypeError("iterations: Is not a Number");
        }
        if (algorithm.iterations < 1) {
            throw new TypeError("iterations: Is less than 1");
        }
    }
}

class Crypto {
}

class ProviderStorage {
    constructor() {
        this.items = {};
    }
    get(algorithmName) {
        return this.items[algorithmName.toLowerCase()] || null;
    }
    set(provider) {
        this.items[provider.name.toLowerCase()] = provider;
    }
    removeAt(algorithmName) {
        const provider = this.get(algorithmName.toLowerCase());
        if (provider) {
            delete this.items[algorithmName];
        }
        return provider;
    }
    has(provider) {
        return this.get(provider.name) === provider;
    }
    get length() {
        return Object.keys(this.items).length;
    }
    get algorithms() {
        const algorithms = [];
        for (const key in this.items) {
            const provider = this.items[key];
            algorithms.push(provider.name);
        }
        return algorithms.sort();
    }
}

class SubtleCrypto {
    constructor() {
        this.providers = new ProviderStorage();
    }
    static isHashedAlgorithm(data) {
        return data instanceof Object
            && "name" in data
            && "hash" in data;
    }
    async digest(algorithm, data) {
        this.checkRequiredArguments(arguments, 2, "digest");
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const preparedData = this.prepareData(data);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.digest(preparedAlgorithm, preparedData);
        return result;
    }
    async generateKey(algorithm, extractable, keyUsages) {
        this.checkRequiredArguments(arguments, 3, "generateKey");
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.generateKey(preparedAlgorithm, extractable, keyUsages);
        return result;
    }
    async sign(algorithm, key, data) {
        this.checkRequiredArguments(arguments, 3, "sign");
        this.checkCryptoKey(key);
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const preparedData = this.prepareData(data);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.sign(preparedAlgorithm, key, preparedData);
        return result;
    }
    async verify(algorithm, key, signature, data) {
        this.checkRequiredArguments(arguments, 4, "verify");
        this.checkCryptoKey(key);
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const preparedData = this.prepareData(data);
        const preparedSignature = this.prepareData(signature);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.verify(preparedAlgorithm, key, preparedSignature, preparedData);
        return result;
    }
    async encrypt(algorithm, key, data) {
        this.checkRequiredArguments(arguments, 3, "encrypt");
        this.checkCryptoKey(key);
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const preparedData = this.prepareData(data);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.encrypt(preparedAlgorithm, key, preparedData);
        return result;
    }
    async decrypt(algorithm, key, data) {
        this.checkRequiredArguments(arguments, 3, "decrypt");
        this.checkCryptoKey(key);
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const preparedData = this.prepareData(data);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.decrypt(preparedAlgorithm, key, preparedData);
        return result;
    }
    async deriveBits(algorithm, baseKey, length) {
        this.checkRequiredArguments(arguments, 3, "deriveBits");
        this.checkCryptoKey(baseKey);
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const provider = this.getProvider(preparedAlgorithm.name);
        const result = await provider.deriveBits(preparedAlgorithm, baseKey, length);
        return result;
    }
    async deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {
        this.checkRequiredArguments(arguments, 5, "deriveKey");
        const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);
        if (!("length" in preparedDerivedKeyType)) {
            throw new RequiredPropertyError("derivedKeyType.length");
        }
        if (typeof preparedDerivedKeyType.length !== "number") {
            throw new TypeError("derivedKeyType.length: Is not a number");
        }
        const derivedBits = await this.deriveBits(algorithm, baseKey, preparedDerivedKeyType.length);
        return this.importKey("raw", derivedBits, derivedKeyType, extractable, keyUsages);
    }
    async exportKey(format, key) {
        this.checkRequiredArguments(arguments, 2, "exportKey");
        this.checkCryptoKey(key);
        const provider = this.getProvider(key.algorithm.name);
        const result = await provider.exportKey(format, key);
        return result;
    }
    async importKey(format, keyData, algorithm, extractable, keyUsages) {
        this.checkRequiredArguments(arguments, 5, "importKey");
        const preparedAlgorithm = this.prepareAlgorithm(algorithm);
        const provider = this.getProvider(preparedAlgorithm.name);
        if (["pkcs8", "spki", "raw"].indexOf(format) !== -1) {
            const preparedData = this.prepareData(keyData);
            return provider.importKey(format, preparedData, preparedAlgorithm, extractable, keyUsages);
        }
        return provider.importKey(format, keyData, preparedAlgorithm, extractable, keyUsages);
    }
    async wrapKey(format, key, wrappingKey, wrapAlgorithm) {
        const keyData = await this.exportKey(format, key);
        if (format === "jwk") {
            const json = JSON.stringify(keyData);
            return this.encrypt(wrapAlgorithm, wrappingKey, pvtsutils.Convert.FromUtf8String(json));
        }
        return this.encrypt(wrapAlgorithm, wrappingKey, keyData);
    }
    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {
        let keyData = await this.decrypt(unwrapAlgorithm, unwrappingKey, wrappedKey);
        if (format === "jwk") {
            keyData = JSON.parse(pvtsutils.Convert.ToUtf8String(keyData));
        }
        return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages);
    }
    checkRequiredArguments(args, size, methodName) {
        if (args.length !== size) {
            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);
        }
    }
    prepareAlgorithm(algorithm) {
        if (typeof algorithm === "string") {
            return {
                name: algorithm,
            };
        }
        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {
            const preparedAlgorithm = { ...algorithm };
            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);
            return preparedAlgorithm;
        }
        return { ...algorithm };
    }
    prepareData(data) {
        if (data instanceof ArrayBuffer) {
            return data;
        }
        if (typeof Buffer !== "undefined" && Buffer.isBuffer(data)) {
            return new Uint8Array(data);
        }
        if (ArrayBuffer.isView(data)) {
            return data.buffer;
        }
        throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
    }
    getProvider(name) {
        const provider = this.providers.get(name);
        if (!provider) {
            throw new AlgorithmError("Unrecognized name");
        }
        return provider;
    }
    checkCryptoKey(key) {
        if (!(key instanceof CryptoKey)) {
            throw new TypeError(`Key is not of type 'CryptoKey'`);
        }
    }
}

exports.AlgorithmError = AlgorithmError;
exports.CryptoError = CryptoError;
exports.UnsupportedOperationError = UnsupportedOperationError;
exports.OperationError = OperationError;
exports.RequiredPropertyError = RequiredPropertyError;
exports.AesProvider = AesProvider;
exports.AesCbcProvider = AesCbcProvider;
exports.AesCmacProvider = AesCmacProvider;
exports.AesCtrProvider = AesCtrProvider;
exports.AesEcbProvider = AesEcbProvider;
exports.AesGcmProvider = AesGcmProvider;
exports.AesKwProvider = AesKwProvider;
exports.DesProvider = DesProvider;
exports.RsaProvider = RsaProvider;
exports.RsaSsaProvider = RsaSsaProvider;
exports.RsaPssProvider = RsaPssProvider;
exports.RsaOaepProvider = RsaOaepProvider;
exports.EllipticProvider = EllipticProvider;
exports.EcdsaProvider = EcdsaProvider;
exports.EcdhProvider = EcdhProvider;
exports.HmacProvider = HmacProvider;
exports.Pbkdf2Provider = Pbkdf2Provider;
exports.Crypto = Crypto;
exports.ProviderCrypto = ProviderCrypto;
exports.SubtleCrypto = SubtleCrypto;
exports.CryptoKey = CryptoKey;
