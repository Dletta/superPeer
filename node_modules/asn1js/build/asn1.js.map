{"version":3,"sources":["../src/asn1.js"],"names":["powers2","Uint8Array","digitsString","LocalBaseBlock","constructor","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","toJSON","byteLength","HexBlock","BaseClass","LocalHexBlockMixin","isHexOnly","valueHex","fromBER","inputBuffer","inputOffset","inputLength","intBuffer","length","push","toBER","sizeOnly","object","ex","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","ValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","utilDecodeTC","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","isEqual","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","LocalIntegerValueBlock","valueDec","_value","_valueHex","_valueDec","fromDER","expectedLength","updatedValueHex","updatedView","toDER","toString","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","Integer","otherValue","convertToDER","integer","convertFromDER","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","RelativeObjectIdentifier","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","buffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parser","parserArray","exec","outputArray","Array","join","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","valueOf","Error","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","baseBlock","newASN1Type","compareSchema","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","verifySchema","fromJSON","json"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\n/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\r\n//**************************************************************************************\r\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, utilConcatView } from \"pvutils\";\r\n//**************************************************************************************\r\n//region Declaration of global variables\r\n//**************************************************************************************\r\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration for \"LocalBaseBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\r\nclass LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {number} blockLength\r\n\t\t */\r\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\r\n\t\t/**\r\n\t\t * @type {string} error\r\n\t\t */\r\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\r\n\t\t/**\r\n\t\t * @type {Array.<string>} warnings\r\n\t\t */\r\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer} valueBeforeDecode\r\n\t\t */\r\n\t\tif(\"valueBeforeDecode\" in parameters)\r\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"baseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tblockName: this.constructor.blockName(),\r\n\t\t\tblockLength: this.blockLength,\r\n\t\t\terror: this.error,\r\n\t\t\twarnings: this.warnings,\r\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Description for \"HexBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef HexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\r\n//noinspection JSUnusedLocalSymbols\r\nexport const HexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"HexBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t */\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"hexBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isHexOnly !== true)\r\n\t\t{\r\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\r\n\t\t\treturn new ArrayBuffer(0);\r\n\t\t}\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n};\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of identification block class\r\n//**************************************************************************************\r\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [idBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"idBlock\" in parameters)\r\n\t\t{\r\n\t\t\t//region Properties from hexBlock class\r\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\r\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\r\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\r\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.tagClass = (-1);\r\n\t\t\tthis.tagNumber = (-1);\r\n\t\t\tthis.isConstructed = false;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"identificationBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet firstOctet = 0;\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tswitch(this.tagClass)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tif(this.isConstructed)\r\n\t\t\tfirstOctet |= 0x20;\r\n\r\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tlet number = this.tagNumber;\r\n\t\t\t\tnumber &= 0x1F;\r\n\t\t\t\tfirstOctet |= number;\r\n\r\n\t\t\t\tretView[0] = firstOctet;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.isHexOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tconst size = encodedBuf.byteLength;\r\n\r\n\t\t\tretBuf = new ArrayBuffer(size + 1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\r\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\r\n\r\n\t\t\t\tretView[size] = encodedView[size - 1];\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\r\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag class\r\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\r\n\r\n\t\tswitch(tagClassMask)\r\n\t\t{\r\n\t\t\tcase 0x00:\r\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x40:\r\n\t\t\t\tthis.tagClass = (2); // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x80:\r\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0xC0:\r\n\t\t\t\tthis.tagClass = (4); // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find it's constructed or not\r\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag number\r\n\t\tthis.isHexOnly = false;\r\n\r\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\r\n\r\n\t\t//region Simple case (tag number < 31)\r\n\t\tif(tagNumberMask !== 0x1F)\r\n\t\t{\r\n\t\t\tthis.tagNumber = (tagNumberMask);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Tag number bigger or equal to 31\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet count = 1;\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(255);\r\n\t\t\tlet tagNumberBufferMaxLength = 255;\r\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\r\n\t\t\t//noinspection JSBitwiseOperatorUsage\r\n\t\t\twhile(intBuffer[count] & 0x80)\r\n\t\t\t{\r\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count >= intBuffer.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\r\n\t\t\t\tif(count === tagNumberBufferMaxLength)\r\n\t\t\t\t{\r\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\r\n\r\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\r\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\r\n\t\t\tthis.blockLength = (count + 1);\r\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\r\n\r\n\t\t\t//region Cut buffer\r\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\r\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\tfor(let i = 0; i < count; i++)\r\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(count);\r\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\tintTagNumberBuffer.set(tempBufferView);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Try to convert long tag number to short form\r\n\t\t\tif(this.blockLength <= 9)\r\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.isHexOnly = true;\r\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Check if constructed encoding was using for primitive type\r\n\t\tif(((this.tagClass === 1)) &&\r\n\t\t\t(this.isConstructed))\r\n\t\t{\r\n\t\t\tswitch(this.tagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:  // Boolean\r\n\t\t\t\tcase 2:  // REAL\r\n\t\t\t\tcase 5:  // Null\r\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\r\n\t\t\t\tcase 9:  // REAL\r\n\t\t\t\tcase 13: // RELATIVE OBJECT IDENTIFIER\r\n\t\t\t\tcase 14: // Time\r\n\t\t\t\tcase 23:\r\n\t\t\t\tcase 24:\r\n\t\t\t\tcase 31:\r\n\t\t\t\tcase 32:\r\n\t\t\t\tcase 33:\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string,\r\n\t *  tagClass: number,\r\n\t *  tagNumber: number,\r\n\t *  isConstructed: boolean,\r\n\t *  isHexOnly: boolean,\r\n\t *  valueHex: ArrayBuffer,\r\n\t *  blockLength: number,\r\n\t *  error: string, warnings: Array.<string>,\r\n\t *  valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.tagClass = this.tagClass;\r\n\t\tobject.tagNumber = this.tagNumber;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of length block class\r\n//**************************************************************************************\r\nclass LocalLengthBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalLengthBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [lenBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"lenBlock\" in parameters)\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\r\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\r\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = false;\r\n\t\t\tthis.longFormUsed = false;\r\n\t\t\tthis.length = 0;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"lengthBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(intBuffer[0] === 0xFF)\r\n\t\t{\r\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check for length form type\r\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of indefinite length form\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check is long form of length encoding using\r\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of short form of length value\r\n\t\tif(this.longFormUsed === false)\r\n\t\t{\r\n\t\t\tthis.length = (intBuffer[0]);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate length value in case of long form\r\n\t\tconst count = intBuffer[0] & 0x7F;\r\n\r\n\t\tif(count > 8) // Too big length value\r\n\t\t{\r\n\t\t\tthis.error = \"Too big integer\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif((count + 1) > intBuffer.length)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tconst lengthBufferView = new Uint8Array(count);\r\n\r\n\t\tfor(let i = 0; i < count; i++)\r\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\r\n\r\n\t\tif(lengthBufferView[count - 1] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\r\n\r\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\r\n\r\n\t\tif(this.longFormUsed && (this.length <= 127))\r\n\t\t\tthis.warnings.push(\"Unneccesary usage of long length form\");\r\n\r\n\t\tthis.blockLength = count + 1;\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.length > 127)\r\n\t\t\tthis.longFormUsed = true;\r\n\r\n\t\tif(this.isIndefiniteForm)\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\tretView[0] = 0x80;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.longFormUsed === true)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\r\n\r\n\t\t\tif(encodedBuf.byteLength > 127)\r\n\t\t\t{\r\n\t\t\t\tthis.error = \"Too big length\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn retBuf;\r\n\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\r\n\r\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\r\n\t\t\t\tretView[i + 1] = encodedView[i];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = this.length;\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.longFormUsed = this.longFormUsed;\r\n\t\tobject.length = this.length;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of value block class\r\n//**************************************************************************************\r\nexport class ValueBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"ValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"valueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic ASN.1 block class\r\n//**************************************************************************************\r\nexport class BaseBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [primitiveSchema]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t * @param valueBlockType Type of value block\r\n\t */\r\n\tconstructor(parameters = {}, valueBlockType = ValueBlock)\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"name\" in parameters)\r\n\t\t\tthis.name = parameters.name;\r\n\t\tif(\"optional\" in parameters)\r\n\t\t\tthis.optional = parameters.optional;\r\n\t\tif(\"primitiveSchema\" in parameters)\r\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\r\n\r\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\r\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\r\n\t\tthis.valueBlock = new valueBlockType(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BaseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf;\r\n\r\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\r\n\r\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\r\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n\r\n\t\tretBuf = utilConcatBuf(idBlockBuf, lenBlockBuf);\r\n\r\n\t\tlet valueBlockBuf;\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n\t\telse\r\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\r\n\r\n\t\tretBuf = utilConcatBuf(retBuf, valueBlockBuf);\r\n\r\n\t\tif(this.lenBlock.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tconst indefBuf = new ArrayBuffer(2);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\r\n\r\n\t\t\t\tindefView[0] = 0x00;\r\n\t\t\t\tindefView[1] = 0x00;\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, indefBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.idBlock = this.idBlock.toJSON();\r\n\t\tobject.lenBlock = this.lenBlock.toJSON();\r\n\t\tobject.valueBlock = this.valueBlock.toJSON();\r\n\r\n\t\tif(\"name\" in this)\r\n\t\t\tobject.name = this.name;\r\n\t\tif(\"optional\" in this)\r\n\t\t\tobject.optional = this.optional;\r\n\t\tif(\"primitiveSchema\" in this)\r\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all PRIMITIVE types\r\n//**************************************************************************************\r\nclass LocalPrimitiveValueBlock extends ValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t//region Variables from \"hexBlock\" class\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer into internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tvalueHexView[i] = intBuffer[i];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrimitiveValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Primitive extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Primitive\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PRIMITIVE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all CONSTRUCTED types\r\n//**************************************************************************************\r\nclass LocalConstructedValueBlock extends ValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalConstructedValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Store initial offset and length\r\n\t\tconst initialOffset = inputOffset;\r\n\t\tconst initialLength = inputLength;\r\n\t\t//endregion\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Aux function\r\n\t\tfunction checkLen(indefiniteLength, length)\r\n\t\t{\r\n\t\t\tif(indefiniteLength === true)\r\n\t\t\t\treturn 1;\r\n\r\n\t\t\treturn length;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tlet currentOffset = inputOffset;\r\n\r\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\r\n\t\t{\r\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\r\n\t\t\tif(returnObject.offset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.error = returnObject.result.error;\r\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\r\n\t\t\tcurrentOffset = returnObject.offset;\r\n\r\n\t\t\tthis.blockLength += returnObject.result.blockLength;\r\n\t\t\tinputLength -= returnObject.result.blockLength;\r\n\r\n\t\t\tthis.value.push(returnObject.result);\r\n\r\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\r\n\t\t\t\tthis.value.pop();\r\n\t\t\telse\r\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\r\n\t\t}\r\n\r\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\r\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\r\n\t\t//endregion\r\n\r\n\t\treturn currentOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ConstructedValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.value = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.value.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Constructed extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Constructed\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalConstructedValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CONSTRUCTED\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 EndOfContent type class\r\n//**************************************************************************************\r\nclass LocalEndOfContentValueBlock extends ValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\r\n\t\treturn inputOffset;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContentValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class EndOfContent extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\tconstructor(paramaters = {})\r\n\t{\r\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContent\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Boolean type class\r\n//**************************************************************************************\r\nclass LocalBooleanValueBlock extends ValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBooleanValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t\t\r\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.valueHex = new ArrayBuffer(1);\r\n\t\t\tif(this.value === true)\r\n\t\t\t{\r\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\t\t\tview[0] = 0xFF;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\tif(inputLength > 1)\r\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n\r\n\t\tthis.isHexOnly = true;\r\n\r\n\t\t//region Copy input buffer to internal array\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tview[i] = intBuffer[i];\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(utilDecodeTC.call(this) !== 0 )\r\n\t\t\tthis.value = true;\r\n\t\telse\r\n\t\t\tthis.value = false;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BooleanValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Boolean extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Boolean\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBooleanValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 1; // Boolean\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Boolean\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Sequence and Set type classes\r\n//**************************************************************************************\r\nexport class Sequence extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Sequence\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 16; // Sequence\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Sequence\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Set extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Set\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 17; // Set\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Set\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Null type class\r\n//**************************************************************************************\r\nexport class Null extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Null\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 5; // Null\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Null\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(this.lenBlock.length > 0)\r\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\t\t\r\n\t\tthis.blockLength += inputLength;\r\n\t\t\r\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tconst retBuf = new ArrayBuffer(2);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\t\tretView[0] = 0x05;\r\n\t\tretView[1] = 0x00;\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 OctetString type class\r\n//**************************************************************************************\r\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalOctetStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = 0;\r\n\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\r\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\tthis.blockLength = inputLength;\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tretBuf = this.valueHex.slice(0);\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class OctetString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"OctetString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalOctetStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 4; // OctetString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\t//region Ability to encode empty OCTET STRING\r\n\t\tif(inputLength === 0)\r\n\t\t{\r\n\t\t\tif(this.idBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Checking that two OCTETSTRINGs are equal\r\n\t * @param {OctetString} octetString\r\n\t */\r\n\tisEqual(octetString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((octetString instanceof OctetString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 BitString type class\r\n//**************************************************************************************\r\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBitStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t\tthis.blockLength = this.valueHex.byteLength;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to decode zero-length BitString value\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tlet resultOffset = (-1);\r\n\r\n\t\t//region If the BISTRING supposed to be a constructed value\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== BitString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\r\n\t\t\t\tif(this.unusedBits > 7)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region If the BitString supposed to be a primitive value\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.unusedBits = intBuffer[0];\r\n\t\t\r\n\t\tif(this.unusedBits > 7)\r\n\t\t{\r\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\r\n\t\t\tview[i] = intBuffer[i + 1];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = intBuffer.length;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\r\n\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = this.unusedBits;\r\n\r\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\t\tretView[i + 1] = curView[i];\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.unusedBits = this.unusedBits;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class BitString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BitString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBitStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 3; // BitString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to encode empty BitString\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Checking that two BITSTRINGs are equal\r\n\t * @param {BitString} bitString\r\n\t */\r\n\tisEqual(bitString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((bitString instanceof BitString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Integer type class\r\n//**************************************************************************************\r\n/**\r\n * @extends ValueBlock\r\n */\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalIntegerValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.valueDec = parameters.value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"valueHex\"\r\n\t * @param {ArrayBuffer} _value\r\n\t */\r\n\tset valueHex(_value)\r\n\t{\r\n\t\tthis._valueHex = _value.slice(0);\r\n\r\n\t\tif(_value.byteLength >= 4)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis._valueDec = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tif(_value.byteLength > 0)\r\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueHex\"\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\tget valueHex()\r\n\t{\r\n\t\treturn this._valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @param {number} _value\r\n\t */\r\n\tset valueDec(_value)\r\n\t{\r\n\t\tthis._valueDec = _value;\r\n\r\n\t\tthis.isHexOnly = false;\r\n\t\tthis._valueHex = utilEncodeTC(_value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @returns {number}\r\n\t */\r\n\tget valueDec()\r\n\t{\r\n\t\treturn this._valueDec;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from DER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\r\n\t{\r\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(offset === (-1))\r\n\t\t\treturn offset;\r\n\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\r\n\t\t{\r\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(expectedLength !== 0)\r\n\t\t\t{\r\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\r\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn offset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoDER(sizeOnly = false)\r\n\t{\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase ((view[0] & 0x80) !== 0):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView[0] = 0x00;\r\n\t\t\t\t\tupdatedView.set(view, 1);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn this.toBER(sizeOnly);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(resultOffset === (-1))\r\n\t\t\treturn resultOffset;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IntegerValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current value to decimal string representation\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\t//region Aux functions\r\n\t\tfunction viewAdd(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value = 0;\r\n\t\t\t\r\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter < secondViewCopy.length):\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tc[0] = value / 10;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\r\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(c[0] > 0)\r\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice(0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction power2(n)\r\n\t\t{\r\n\t\t\tif(n >= powers2.length)\r\n\t\t\t{\r\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let i = (digits.length - 1); i >=0; i--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\r\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (c[0] > 0)\r\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpowers2.push(digits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn powers2[n];\r\n\t\t}\r\n\t\t\r\n\t\tfunction viewSub(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet b = 0;\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (value < 0):\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(b > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(value < 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice();\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\r\n\t\t\r\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\r\n\t\tlet bitNumber = 0;\r\n\t\tlet currentByte;\r\n\t\t\r\n\t\tconst asn1View = new Uint8Array(this._valueHex);\r\n\t\t\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tlet flag = false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Calculate number\r\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\r\n\t\t{\r\n\t\t\tcurrentByte = asn1View[byteNumber];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < 8; i++)\r\n\t\t\t{\r\n\t\t\t\tif((currentByte & 1) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(bitNumber)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase firstBit:\r\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\r\n\t\t\t\t\t\t\tresult = \"-\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbitNumber++;\r\n\t\t\t\tcurrentByte >>= 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Print number\r\n\t\tfor(let i = 0; i < digits.length; i++)\r\n\t\t{\r\n\t\t\tif(digits[i])\r\n\t\t\t\tflag = true;\r\n\t\t\t\r\n\t\t\tif(flag)\r\n\t\t\t\tresult += digitsString.charAt(digits[i]);\r\n\t\t}\r\n\t\t\r\n\t\tif(flag === false)\r\n\t\t\tresult += digitsString.charAt(0);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Integer extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Integer\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalIntegerValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 2; // Integer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Integer\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\r\n\t * @param {!Integer|ArrayBuffer} otherValue\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(otherValue)\r\n\t{\r\n\t\tif(otherValue instanceof Integer)\r\n\t\t{\r\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\r\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\r\n\r\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\r\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif(otherValue instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from BER into DER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertToDER()\r\n\t{\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.toDER();\r\n\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from DER to BER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertFromDER()\r\n\t{\r\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\r\n\t\t\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Enumerated type class\r\n//**************************************************************************************\r\nexport class Enumerated extends Integer\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Enumerated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Enumerated\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 ObjectIdentifier type class\r\n//**************************************************************************************\r\nclass LocalSidValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSidValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {number} [valueDec]\r\n\t * @property {boolean} [isFirstSid]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\r\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"sidBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\r\n\t\tlet view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < inputLength; i++)\r\n\t\t{\r\n\t\t\tview[i] = intBuffer[i] & 0x7F;\r\n\r\n\t\t\tthis.blockLength++;\r\n\r\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//region Ajust size of valueHex buffer\r\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\r\n\t\tconst tempView = new Uint8Array(tempValueHex);\r\n\r\n\t\tfor(let i = 0; i < this.blockLength; i++)\r\n\t\t\ttempView[i] = view[i];\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tthis.valueHex = tempValueHex.slice(0);\r\n\t\tview = new Uint8Array(this.valueHex);\r\n\t\t//endregion\r\n\r\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(view[0] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n\t\tif(this.blockLength <= 8)\r\n\t\t\tthis.valueDec = utilFromBase(view, 7);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\r\n\t\t}\r\n\r\n\t\treturn (inputOffset + this.blockLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.isHexOnly)\r\n\t\t{\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\r\n\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\r\n\t\t\t\tretView[i] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\r\n\t\tif(encodedBuf.byteLength === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Error during encoding SID value\";\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\r\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\r\n\r\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create string representation of current SID block\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\r\n\t\tif(this.isHexOnly === true)\r\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.isFirstSid)\r\n\t\t\t{\r\n\t\t\t\tlet sidValue = this.valueDec;\r\n\r\n\t\t\t\tif(this.valueDec <= 39)\r\n\t\t\t\t\tresult = \"0.\";\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.valueDec <= 79)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"1.\";\r\n\t\t\t\t\t\tsidValue -= 40;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"2.\";\r\n\t\t\t\t\t\tsidValue -= 80;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += sidValue.toString();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = this.valueDec.toString();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\t\tobject.isFirstSid = this.isFirstSid;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalObjectIdentifierValueBlock extends ValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = inputOffset;\r\n\r\n\t\twhile(inputLength > 0)\r\n\t\t{\r\n\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.blockLength = 0;\r\n\t\t\t\tthis.error = sidBlock.error;\r\n\t\t\t\treturn resultOffset;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.value.length === 0)\r\n\t\t\t\tsidBlock.isFirstSid = true;\r\n\r\n\t\t\tthis.blockLength += sidBlock.blockLength;\r\n\t\t\tinputLength -= sidBlock.blockLength;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tif(valueBuf.byteLength === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.error = this.value[i].error;\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n\t * @param {string} string Input string to convert from\r\n\t * @returns {boolean}\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tthis.value = []; // Clear existing SID values\r\n\r\n\t\tlet pos1 = 0;\r\n\t\tlet pos2 = 0;\r\n\r\n\t\tlet sid = \"\";\r\n\r\n\t\tlet flag = false;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tpos2 = string.indexOf(\".\", pos1);\r\n\t\t\tif(pos2 === (-1))\r\n\t\t\t\tsid = string.substr(pos1);\r\n\t\t\telse\r\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\r\n\r\n\t\t\tpos1 = pos2 + 1;\r\n\r\n\t\t\tif(flag)\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = this.value[0];\r\n\r\n\t\t\t\tlet plus = 0;\r\n\r\n\t\t\t\tswitch(sidBlock.valueDec)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tplus = 40;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplus = 80;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.value = []; // clear SID array\r\n\t\t\t\t\t\treturn false; // ???\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(parsedSID))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\r\n\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(sidBlock.valueDec))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tif(this.value.length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tsidBlock.isFirstSid = true;\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.value.push(sidBlock);\r\n\t\t\t}\r\n\t\t} while(pos2 !== (-1));\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\tlet isHexOnly = false;\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tisHexOnly = this.value[i].isHexOnly;\r\n\r\n\t\t\tlet sidStr = this.value[i].toString();\r\n\r\n\t\t\tif(i !== 0)\r\n\t\t\t\tresult = `${result}.`;\r\n\r\n\t\t\tif(isHexOnly)\r\n\t\t\t{\r\n\t\t\t\tsidStr = `{${sidStr}}`;\r\n\r\n\t\t\t\tif(this.value[i].isFirstSid)\r\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\r\n\t\t\t\telse\r\n\t\t\t\t\tresult += sidStr;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult += sidStr;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifierValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.toString();\r\n\t\tobject.sidArray = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class ObjectIdentifier extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"ObjectIdentifier\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifier\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all string's classes\r\n//**************************************************************************************\r\nclass LocalUtf8StringValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8StringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class Utf8String extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Utf8String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8String\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//noinspection JSDeprecatedSymbols\r\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//noinspection JSDeprecatedSymbols\r\n\t\tconst str = unescape(encodeURIComponent(inputString));\r\n\t\tconst strLen = str.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 RelativeObjectIdentifier type class\r\n//**************************************************************************************\r\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalRelativeSidValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {number} [valueDec]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"relativeSidBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif (inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif (checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\r\n\t\tlet view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor (let i = 0; i < inputLength; i++)\r\n\t\t{\r\n\t\t\tview[i] = intBuffer[i] & 0x7F;\r\n\r\n\t\t\tthis.blockLength++;\r\n\r\n\t\t\tif ((intBuffer[i] & 0x80) === 0x00)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//region Ajust size of valueHex buffer\r\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\r\n\t\tconst tempView = new Uint8Array(tempValueHex);\r\n\r\n\t\tfor (let i = 0; i < this.blockLength; i++)\r\n\t\t\ttempView[i] = view[i];\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tthis.valueHex = tempValueHex.slice(0);\r\n\t\tview = new Uint8Array(this.valueHex);\r\n\t\t//endregion\r\n\r\n\t\tif ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif (view[0] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n\t\tif (this.blockLength <= 8)\r\n\t\t\tthis.valueDec = utilFromBase(view, 7);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\r\n\t\t}\r\n\r\n\t\treturn (inputOffset + this.blockLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif (this.isHexOnly)\r\n\t\t{\r\n\t\t\tif (sizeOnly === true)\r\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\r\n\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor (let i = 0; i < (this.blockLength - 1); i++)\r\n\t\t\t\tretView[i] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\r\n\t\tif (encodedBuf.byteLength === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Error during encoding SID value\";\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\r\n\r\n\t\tif (sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor (let i = 0; i < (encodedBuf.byteLength - 1); i++)\r\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\r\n\r\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create string representation of current SID block\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\r\n\t\tif (this.isHexOnly === true)\r\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\telse {\r\n\t\t\tresult = this.valueDec.toString();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry {\r\n\t\t\tobject = super.toJSON();\r\n\t\t} catch (ex) {}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalRelativeObjectIdentifierValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = inputOffset;\r\n\r\n\t\twhile (inputLength > 0)\r\n\t\t{\r\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\r\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n\t\t\tif (resultOffset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.blockLength = 0;\r\n\t\t\t\tthis.error = sidBlock.error;\r\n\t\t\t\treturn resultOffset;\r\n\t\t\t}\r\n\r\n\t\t\tthis.blockLength += sidBlock.blockLength;\r\n\t\t\tinputLength -= sidBlock.blockLength;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor (let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tif (valueBuf.byteLength === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.error = this.value[i].error;\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"LocalRelativeObjectIdentifierValueBlock\" class from string\r\n\t * @param {string} string Input string to convert from\r\n\t * @returns {boolean}\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tthis.value = []; // Clear existing SID values\r\n\r\n\t\tlet pos1 = 0;\r\n\t\tlet pos2 = 0;\r\n\r\n\t\tlet sid = \"\";\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tpos2 = string.indexOf(\".\", pos1);\r\n\t\t\tif (pos2 === (-1))\r\n\t\t\t\tsid = string.substr(pos1);\r\n\t\t\telse\r\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\r\n\r\n\t\t\tpos1 = pos2 + 1;\r\n\r\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\r\n\t\t\tsidBlock.valueDec = parseInt(sid, 10);\r\n\t\t\tif (isNaN(sidBlock.valueDec))\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\r\n\t\t} while (pos2 !== (-1));\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Converts \"LocalRelativeObjectIdentifierValueBlock\" class to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\tlet isHexOnly = false;\r\n\r\n\t\tfor (let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tisHexOnly = this.value[i].isHexOnly;\r\n\r\n\t\t\tlet sidStr = this.value[i].toString();\r\n\r\n\t\t\tif (i !== 0)\r\n\t\t\t\tresult = `${result}.`;\r\n\r\n\t\t\tif (isHexOnly)\r\n\t\t\t{\r\n\t\t\t\tsidStr = `{${sidStr}}`;\r\n\t\t\t\tresult += sidStr;\r\n\t\t\t} else\r\n\t\t\t\tresult += sidStr;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"RelativeObjectIdentifierValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t} catch (ex) {}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.toString();\r\n\t\tobject.sidArray = [];\r\n\t\tfor (let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class RelativeObjectIdentifier extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"RelativeObjectIdentifier\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 13; // RELATIVE OBJECT IDENTIFIER\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"RelativeObjectIdentifier\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalBaseBlock\r\n * @extends HexBlock\r\n */\r\nclass LocalBmpStringValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBmpStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class BmpString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BmpString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBmpStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 30; // BmpString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 2)\r\n\t\t{\r\n\t\t\tconst temp = valueView[i];\r\n\r\n\t\t\tvalueView[i] = valueView[i + 1];\r\n\t\t\tvalueView[i + 1] = temp;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 2)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 2 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalUniversalStringValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class UniversalString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UniversalString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 4)\r\n\t\t{\r\n\t\t\tvalueView[i] = valueView[i + 3];\r\n\t\t\tvalueView[i + 1] = valueView[i + 2];\r\n\t\t\tvalueView[i + 2] = 0x00;\r\n\t\t\tvalueView[i + 3] = 0x00;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 4)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 4 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalSimpleStringValueBlock extends HexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = \"\";\r\n\t\tthis.isHexOnly = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SimpleStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nclass LocalSimpleStringBlock extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SIMPLESTRING\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLen = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = inputString.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class NumericString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"NumericString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 18; // NumericString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"NumericString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class PrintableString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"PrintableString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrintableString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class TeletexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TeletexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TeletexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VideotexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VideotexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VideotexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class IA5String extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"IA5String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 22; // IA5String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IA5String\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GraphicString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GraphicString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GraphicString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VisibleString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VisibleString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VisibleString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GeneralString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class CharacterString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"CharacterString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CharacterString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all date and time classes\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class UTCTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UTCTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Parse input string\r\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n\t\tconst parserArray = parser.exec(inputString);\r\n\t\tif(parserArray === null)\r\n\t\t{\r\n\t\t\tthis.error = \"Wrong input string for convertion\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Store parsed values\r\n\t\tconst year = parseInt(parserArray[1], 10);\r\n\t\tif(year >= 50)\r\n\t\t\tthis.year = 1900 + year;\r\n\t\telse\r\n\t\t\tthis.year = 2000 + year;\r\n\r\n\t\tthis.month = parseInt(parserArray[2], 10);\r\n\t\tthis.day = parseInt(parserArray[3], 10);\r\n\t\tthis.hour = parseInt(parserArray[4], 10);\r\n\t\tthis.minute = parseInt(parserArray[5], 10);\r\n\t\tthis.second = parseInt(parserArray[6], 10);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = new Array(7);\r\n\r\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n\t\toutputArray[1] = padNumber(this.month, 2);\r\n\t\toutputArray[2] = padNumber(this.day, 2);\r\n\t\toutputArray[3] = padNumber(this.hour, 2);\r\n\t\toutputArray[4] = padNumber(this.minute, 2);\r\n\t\toutputArray[5] = padNumber(this.second, 2);\r\n\t\toutputArray[6] = \"Z\";\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UTCTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class GeneralizedTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralizedTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\t\tthis.millisecond = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet isUTC = false;\r\n\r\n\t\tlet timeString = \"\";\r\n\t\tlet dateTimeString = \"\";\r\n\t\tlet fractionPart = 0;\r\n\r\n\t\tlet parser;\r\n\r\n\t\tlet hourDifference = 0;\r\n\t\tlet minuteDifference = 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert as UTC time\r\n\t\tif(inputString[inputString.length - 1] === \"Z\")\r\n\t\t{\r\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\r\n\r\n\t\t\tisUTC = true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Convert as local time\r\n\t\telse\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\r\n\r\n\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\ttimeString = inputString;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\r\n\t\tif(isUTC)\r\n\t\t{\r\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Get \"UTC time difference\" in case of local time\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet multiplier = 1;\r\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\r\n\t\t\tlet differenceString = \"\";\r\n\r\n\t\t\tif(differencePosition === (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\r\n\t\t\t\tmultiplier = (-1);\r\n\t\t\t}\r\n\r\n\t\t\tif(differencePosition !== (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\r\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\r\n\r\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\r\n\r\n\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\thourDifference = multiplier * number;\r\n\r\n\t\t\t\tif(differenceString.length === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\r\n\r\n\t\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t\tminuteDifference = multiplier * number;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get position of fraction point\r\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\r\n\t\tif(fractionPointPosition === (-1))\r\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\r\n\t\t//endregion\r\n\r\n\t\t//region Get fraction part\r\n\t\tif(fractionPointPosition !== (-1))\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\r\n\r\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tfractionPart = fractionPartCheck.valueOf();\r\n\r\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\r\n\t\t}\r\n\t\telse\r\n\t\t\tdateTimeString = timeString;\r\n\t\t//endregion\r\n\r\n\t\t//region Parse internal date\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Put parsed values at right places\r\n\t\tconst parserArray = parser.exec(dateTimeString);\r\n\t\tif(parserArray === null)\r\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\tfor(let j = 1; j < parserArray.length; j++)\r\n\t\t{\r\n\t\t\tswitch(j)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get final date\r\n\t\tif(isUTC === false)\r\n\t\t{\r\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\r\n\t\t\tthis.year = tempDate.getUTCFullYear();\r\n\t\t\tthis.month = tempDate.getUTCMonth();\r\n\t\t\tthis.day = tempDate.getUTCDay();\r\n\t\t\tthis.hour = tempDate.getUTCHours();\r\n\t\t\tthis.minute = tempDate.getUTCMinutes();\r\n\t\t\tthis.second = tempDate.getUTCSeconds();\r\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(padNumber(this.year, 4));\r\n\t\toutputArray.push(padNumber(this.month, 2));\r\n\t\toutputArray.push(padNumber(this.day, 2));\r\n\t\toutputArray.push(padNumber(this.hour, 2));\r\n\t\toutputArray.push(padNumber(this.minute, 2));\r\n\t\toutputArray.push(padNumber(this.second, 2));\r\n\t\tif(this.millisecond !== 0)\r\n\t\t{\r\n\t\t\toutputArray.push(\".\");\r\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\r\n\t\t}\r\n\t\toutputArray.push(\"Z\");\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralizedTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\t\tobject.millisecond = this.millisecond;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DATE extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DATE\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 31; // DATE\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DATE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TimeOfDay extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TimeOfDay\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TimeOfDay\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DateTime extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DateTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 33; // DateTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DateTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class Duration extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Duration\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 34; // Duration\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Duration\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TIME extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Time\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 14; // Time\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TIME\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Choice\r\n//**************************************************************************************\r\nexport class Choice\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Choice\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Any\r\n//**************************************************************************************\r\nexport class Any\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Any\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Repeated\r\n//**************************************************************************************\r\nexport class Repeated\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\r\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type RawData\r\n//**************************************************************************************\r\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\r\nexport class RawData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.data;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major ASN.1 BER decoding function\r\n//**************************************************************************************\r\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\r\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\r\n{\r\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\r\n\r\n\t//region Local function changing a type for ASN.1 classes\r\n\tfunction localChangeType(inputObject, newType)\r\n\t{\r\n\t\tif(inputObject instanceof newType)\r\n\t\t\treturn inputObject;\r\n\r\n\t\tconst newObject = new newType();\r\n\t\tnewObject.idBlock = inputObject.idBlock;\r\n\t\tnewObject.lenBlock = inputObject.lenBlock;\r\n\t\tnewObject.warnings = inputObject.warnings;\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\r\n\tlet returnObject = new BaseBlock({}, Object);\r\n\t//endregion\r\n\r\n\t//region Basic check for parameters\r\n\tconst baseBlock = new LocalBaseBlock();\r\n\tif(checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) === false)\r\n\t{\r\n\t\treturnObject.error = baseBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting Uint8Array from ArrayBuffer\r\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t//endregion\r\n\r\n\t//region Initial checks\r\n\tif(intBuffer.length === 0)\r\n\t{\r\n\t\tthis.error = \"Zero buffer length\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decode indentifcation block of ASN.1 BER structure\r\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.idBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.idBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Decode length block of ASN.1 BER structure\r\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.lenBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.lenBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Check for usign indefinite length form in encoding for primitive types\r\n\tif((returnObject.idBlock.isConstructed === false) &&\r\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\r\n\t{\r\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Switch ASN.1 block type\r\n\tlet newASN1Type = BaseBlock;\r\n\r\n\tswitch(returnObject.idBlock.tagClass)\r\n\t{\r\n\t\t//region UNIVERSAL\r\n\t\tcase 1:\r\n\t\t\t//region Check for reserved tag numbers\r\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\r\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\r\n\t\t\t{\r\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n\t\t\t\treturn {\r\n\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\tresult: returnObject\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(returnObject.idBlock.tagNumber)\r\n\t\t\t{\r\n\t\t\t\t//region EndOfContent type\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t//region Check for EndOfContent type\r\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\r\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tnewASN1Type = EndOfContent;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Boolean type\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tnewASN1Type = Boolean;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Integer type\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tnewASN1Type = Integer;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BitString type\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tnewASN1Type = BitString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OctetString type\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tnewASN1Type = OctetString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Null type\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tnewASN1Type = Null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OBJECT IDENTIFIER type\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Enumerated type\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tnewASN1Type = Enumerated;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Utf8String type\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tnewASN1Type = Utf8String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Time type\r\n\t\t\t\t//region RELATIVE OBJECT IDENTIFIER type\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tnewASN1Type = RelativeObjectIdentifier;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tnewASN1Type = TIME;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region ASN.1 reserved type\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t};\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Sequence type\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tnewASN1Type = Sequence;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Set type\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tnewASN1Type = Set;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region NumericString type\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tnewASN1Type = NumericString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region PrintableString type\r\n\t\t\t\tcase 19:\r\n\t\t\t\t\tnewASN1Type = PrintableString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TeletexString type\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tnewASN1Type = TeletexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VideotexString type\r\n\t\t\t\tcase 21:\r\n\t\t\t\t\tnewASN1Type = VideotexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region IA5String type\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tnewASN1Type = IA5String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UTCTime type\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tnewASN1Type = UTCTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralizedTime type\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GraphicString type\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tnewASN1Type = GraphicString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VisibleString type\r\n\t\t\t\tcase 26:\r\n\t\t\t\t\tnewASN1Type = VisibleString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralString type\r\n\t\t\t\tcase 27:\r\n\t\t\t\t\tnewASN1Type = GeneralString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UniversalString type\r\n\t\t\t\tcase 28:\r\n\t\t\t\t\tnewASN1Type = UniversalString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region CharacterString type\r\n\t\t\t\tcase 29:\r\n\t\t\t\t\tnewASN1Type = CharacterString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BmpString type\r\n\t\t\t\tcase 30:\r\n\t\t\t\t\tnewASN1Type = BmpString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region DATE type\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tnewASN1Type = DATE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TimeOfDay type\r\n\t\t\t\tcase 32:\r\n\t\t\t\t\tnewASN1Type = TimeOfDay;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Date-Time type\r\n\t\t\t\tcase 33:\r\n\t\t\t\t\tnewASN1Type = DateTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Duration type\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tnewASN1Type = Duration;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region default\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet newObject;\r\n\r\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\t\t\tnewObject = new Constructed();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tnewObject = new Primitive();\r\n\r\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\r\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\r\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\r\n\r\n\t\t\t\t\t\treturnObject = newObject;\r\n\r\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t//endregion\r\n\t\t//region All other tag classes\r\n\t\tcase 2: // APPLICATION\r\n\t\tcase 3: // CONTEXT-SPECIFIC\r\n\t\tcase 4: // PRIVATE\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\tnewASN1Type = Constructed;\r\n\t\t\t\telse\r\n\t\t\t\t\tnewASN1Type = Primitive;\r\n\t\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Change type and perform BER decoding\r\n\treturnObject = localChangeType(returnObject, newASN1Type);\r\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\r\n\t//endregion\r\n\r\n\t//region Coping incoming buffer for entire ASN.1 block\r\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\r\n\t//endregion\r\n\r\n\treturn {\r\n\t\toffset: resultOffset,\r\n\t\tresult: returnObject\r\n\t};\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\r\nexport function fromBER(inputBuffer)\r\n{\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\tconst result = new BaseBlock({}, Object);\r\n\t\tresult.error = \"Input buffer has zero length\";\r\n\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult\r\n\t\t};\r\n\t}\r\n\r\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major scheme verification function\r\n//**************************************************************************************\r\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function compareSchema(root, inputData, inputSchema)\r\n{\r\n\t//region Special case for Choice schema element type\r\n\tif(inputSchema instanceof Choice)\r\n\t{\r\n\t\tconst choiceResult = false;\r\n\r\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\r\n\t\t{\r\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\r\n\t\t\tif(result.verified === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(choiceResult === false)\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: {\r\n\t\t\t\t\terror: \"Wrong values for Choice type\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t_result.name = inputSchema.name;\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Special case for Any schema element type\r\n\tif(inputSchema instanceof Any)\r\n\t{\r\n\t\t//region Add named component of ASN.1 schema\r\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t\t//endregion\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Initial check\r\n\tif((root instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong root object\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputData instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"idBlock\" in inputSchema) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\r\n\t//region Encode and decode ASN.1 schema idBlock\r\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\r\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"toBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst encodedId = inputSchema.idBlock.toBER(false);\r\n\tif(encodedId.byteLength === 0)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n\tif(decodedOffset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region tagClass\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region tagNumber\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isConstructed\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isHexOnly\r\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region valueHex\r\n\tif(inputSchema.idBlock.isHexOnly === true)\r\n\t{\r\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\r\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\r\n\r\n\t\tif(schemaView.length !== asn1View.length)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfor(let i = 0; i < schemaView.length; i++)\r\n\t\t{\r\n\t\t\tif(schemaView[i] !== asn1View[1])\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: false,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t//endregion\r\n\r\n\t//region Add named component of ASN.1 schema\r\n\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t{\r\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\tif(inputSchema.name !== \"\")\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting next ASN.1 block for comparition\r\n\tif(inputSchema.idBlock.isConstructed === true)\r\n\t{\r\n\t\tlet admission = 0;\r\n\t\tlet result = { verified: false };\r\n\r\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\r\n\r\n\t\tif(maxLength > 0)\r\n\t\t{\r\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\r\n\t\t}\r\n\r\n\t\t//region Special case when constructive value has no elements\r\n\t\tif(maxLength === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: true,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\r\n\t\tif((inputData.valueBlock.value.length === 0) &&\r\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\r\n\t\t{\r\n\t\t\tlet _optional = true;\r\n\r\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n\r\n\t\t\tif(_optional === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\troot.error = \"Inconsistent object length\";\r\n\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tfor(let i = 0; i < maxLength; i++)\r\n\t\t{\r\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\r\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\r\n\t\t\t{\r\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst _result = {\r\n\t\t\t\t\t\tverified: false,\r\n\t\t\t\t\t\tresult: root\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\r\n\r\n\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\treturn _result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\r\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet arrayRoot = {};\r\n\r\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\r\n\t\t\t\t\t\t\tarrayRoot = inputData;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tarrayRoot = root;\r\n\r\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n\r\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\r\n\tif((\"primitiveSchema\" in inputSchema) &&\r\n\t\t(\"valueHex\" in inputData.valueBlock))\r\n\t{\r\n\t\t//region Decoding of raw ASN.1 data\r\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: asn1.result\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n\t}\r\n\r\n\treturn {\r\n\t\tverified: true,\r\n\t\tresult: root\r\n\t};\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function verifySchema(inputBuffer, inputSchema)\r\n{\r\n\t//region Initial check\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decoding of raw ASN.1 data\r\n\tconst asn1 = fromBER(inputBuffer);\r\n\tif(asn1.offset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: asn1.result\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Compare ASN.1 struct with input schema\r\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major function converting JSON to ASN.1 objects\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\r\nexport function fromJSON(json)\r\n{\r\n\t// TODO Implement\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n"],"file":"asn1.js"}