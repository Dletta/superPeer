
// FILE GENERATED BY `rollup-plugin-dts@0.13.0`
// https://github.com/Swatinem/rollup-plugin-dts

/**
 * ASN1 type
 */
interface IEmptyConstructor<T> {
    new (): T;
}
/**
 * Allows to convert ASN.1 object to JS value and back
 */
interface IAsnConverter<T = any, AsnType = any> {
    /**
     * Returns JS value from ASN.1 object
     * @param value ASN.1 object from asn1js module
     */
    fromASN(value: AsnType): T;
    /**
     * Returns ASN.1 object from JS value
     * @param value JS value
     */
    toASN(value: T): AsnType;
}
declare type IntegerConverterType = string | number;
declare type AnyConverterType = ArrayBuffer | null;
/**
 * Allows an object to control its own ASN.1 serialization and deserialization
 */
interface IAsnConvertible<T = any> {
    fromASN(asn: T): this;
    toASN(): T;
}

/**
 * NOTE: Converter MUST have name Asn<Asn1PropType.name>Converter.
 * Asn1Prop decorator link custom converters by name of the Asn1PropType
 */
/**
 * ASN.1 ANY converter
 */
declare const AsnAnyConverter: IAsnConverter<AnyConverterType>;
/**
 * ASN.1 INTEGER to Number/String converter
 */
declare const AsnIntegerConverter: IAsnConverter<IntegerConverterType>;
/**
 * ASN.1 ENUMERATED converter
 */
declare const AsnEnumeratedConverter: IAsnConverter<number>;
/**
 * ASN.1 INTEGER to ArrayBuffer converter
 */
declare const AsnIntegerArrayBufferConverter: IAsnConverter<ArrayBuffer>;
/**
 * ASN.1 BIT STRING converter
 */
declare const AsnBitStringConverter: IAsnConverter<ArrayBuffer>;
/**
 * ASN.1 OBJECT IDENTIFIER converter
 */
declare const AsnObjectIdentifierConverter: IAsnConverter<string>;
/**
 * ASN.1 BOOLEAN converter
 */
declare const AsnBooleanConverter: IAsnConverter<boolean>;
/**
 * ASN.1 OCTET_STRING converter
 */
declare const AsnOctetStringConverter: IAsnConverter<ArrayBuffer>;
/**
 * ASN.1 UTF8_STRING converter
 */
declare const AsnUtf8StringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 BPM STRING converter
 */
declare const AsnBmpStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 UNIVERSAL STRING converter
 */
declare const AsnUniversalStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 NUMERIC STRING converter
 */
declare const AsnNumericStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 PRINTABLE STRING converter
 */
declare const AsnPrintableStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 TELETEX STRING converter
 */
declare const AsnTeletexStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 VIDEOTEX STRING converter
 */
declare const AsnVideotexStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 IA5 STRING converter
 */
declare const AsnIA5StringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 GRAPHIC STRING converter
 */
declare const AsnGraphicStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 VISIBLE STRING converter
 */
declare const AsnVisibleStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 GENERAL STRING converter
 */
declare const AsnGeneralStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 CHARACTER STRING converter
 */
declare const AsnCharacterStringConverter: IAsnConverter<string, any>;
/**
 * ASN.1 UTCTime converter
 */
declare const AsnUTCTimeConverter: IAsnConverter<Date>;
/**
 * ASN.1 GeneralizedTime converter
 */
declare const AsnGeneralizedTimeConverter: IAsnConverter<Date>;

/**
 * ASN.1 types for classes
 */
declare enum AsnTypeTypes {
    Sequence = 0,
    Set = 1,
    Choice = 2
}
/**
 * ASN.1 types for properties
 */
declare enum AsnPropTypes {
    Any = 0,
    Boolean = 1,
    OctetString = 2,
    BitString = 3,
    Integer = 4,
    Enumerated = 5,
    ObjectIdentifier = 6,
    Utf8String = 7,
    BmpString = 8,
    UniversalString = 9,
    NumericString = 10,
    PrintableString = 11,
    TeletexString = 12,
    VideotexString = 13,
    IA5String = 14,
    GraphicString = 15,
    VisibleString = 16,
    GeneralString = 17,
    CharacterString = 18,
    UTCTime = 19,
    GeneralizedTime = 20,
    DATE = 21,
    TimeOfDay = 22,
    DateTime = 23,
    Duration = 24,
    TIME = 25,
    Null = 26
}

interface IAsn1TypeOptions {
    type: AsnTypeTypes;
}
interface IAsn1PropOptions {
    type: AsnPropTypes | IEmptyConstructor<any>;
    optional?: boolean;
    defaultValue?: any;
    context?: number;
    implicit?: boolean;
    converter?: IAsnConverter;
    repeated?: boolean;
}
declare const AsnType: (options: IAsn1TypeOptions) => (target: object) => void;
declare const AsnProp: (options: IAsn1PropOptions) => (target: object, propertyKey: string) => void;

/**
 * Deserializes objects from ASN.1 encoded data
 */
declare class AsnParser {
    /**
     * Deserializes an object from the ASN.1 encoded buffer
     * @param data ASN.1 encoded buffer
     * @param target Target schema for object deserialization
     */
    static parse<T>(data: BufferSource, target: IEmptyConstructor<T>): T;
    /**
     * Deserializes an object from the asn1js object
     * @param asn1Schema asn1js object
     * @param target Target schema for object deserialization
     */
    static fromASN<T>(asn1Schema: any, target: IEmptyConstructor<T>): any;
}

/**
 * Serializes objects into ASN.1 encoded data
 */
declare class AsnSerializer {
    /**
     * Serializes an object to the ASN.1 encoded buffer
     * @param obj The object to serialize
     */
    static serialize(obj: any): ArrayBuffer;
    /**
     * Serialize an object to the asn1js object
     * @param obj The object to serialize
     */
    static toASN(obj: any): any;
}

export { AsnAnyConverter, AsnBitStringConverter, AsnBmpStringConverter, AsnBooleanConverter, AsnCharacterStringConverter, AsnEnumeratedConverter, AsnGeneralStringConverter, AsnGeneralizedTimeConverter, AsnGraphicStringConverter, AsnIA5StringConverter, AsnIntegerArrayBufferConverter, AsnIntegerConverter, AsnNumericStringConverter, AsnObjectIdentifierConverter, AsnOctetStringConverter, AsnParser, AsnPrintableStringConverter, AsnProp, AsnPropTypes, AsnSerializer, AsnTeletexStringConverter, AsnType, AsnTypeTypes, AsnUTCTimeConverter, AsnUniversalStringConverter, AsnUtf8StringConverter, AsnVideotexStringConverter, AsnVisibleStringConverter, IAsnConverter, IAsnConvertible };
